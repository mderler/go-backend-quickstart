basePath: /v1
definitions:
  db.Todo:
    properties:
      completed:
        type: boolean
      created_at:
        type: string
      creator_id:
        type: integer
      description:
        type: string
      id:
        type: integer
      title:
        type: string
      updated_at:
        type: string
    type: object
  db.User:
    properties:
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      username:
        type: string
    type: object
  handlers.ErrorResponse:
    properties:
      detail:
        type: string
      title:
        type: string
      type:
        $ref: '#/definitions/handlers.ErrorType'
    type: object
  handlers.ErrorType:
    enum:
    - json-decode-error
    - user-not-found
    - invalid-user-id
    - todo-not-found
    - invalid-todo-id
    - invalid-query
    - todo-assign-error
    type: string
    x-enum-varnames:
    - JSONDecodeError
    - UserNotFoundError
    - InvalidUserIdError
    - TodoNotFoundError
    - InvalidTodoIdError
    - InvalidQueryError
    - TodoAssignError
  handlers.InternalErrorResponse:
    properties:
      title:
        type: string
      type:
        enum:
        - internal-server-error
        type: string
    type: object
  handlers.InvalidParam:
    properties:
      message:
        type: string
      tag:
        type: string
    type: object
  handlers.TodoAssignRequest:
    properties:
      userId:
        type: integer
    required:
    - userId
    type: object
  handlers.TodoCreateRequest:
    properties:
      creatorId:
        type: integer
      description:
        maxLength: 1000
        type: string
      title:
        maxLength: 255
        minLength: 1
        type: string
    required:
    - creatorId
    - description
    - title
    type: object
  handlers.TodoUpdateRequest:
    properties:
      completed:
        type: boolean
      creatorId:
        type: integer
      description:
        maxLength: 1000
        type: string
      title:
        maxLength: 255
        minLength: 1
        type: string
    required:
    - completed
    - creatorId
    - description
    - title
    type: object
  handlers.UserRequest:
    properties:
      email:
        type: string
      password:
        maxLength: 255
        minLength: 8
        type: string
      username:
        maxLength: 20
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  handlers.ValidationErrorResponse:
    properties:
      detail:
        type: string
      invalid_params:
        additionalProperties:
          $ref: '#/definitions/handlers.InvalidParam'
        type: object
      type:
        enum:
        - validation-error
        type: string
    type: object
info:
  contact: {}
  description: This is a sample API Server.
  license:
    name: MIT
  title: Go Example API
  version: "1.0"
paths:
  /todo:
    get:
      description: Get the list of all todos.
      produces:
      - application/json
      responses:
        "200":
          description: List of todos
          schema:
            items:
              $ref: '#/definitions/db.Todo'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.InternalErrorResponse'
      summary: Get all todos
      tags:
      - Todo
    post:
      consumes:
      - application/json
      description: Create a new todo with the provided todo data.
      parameters:
      - description: Todo data
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/handlers.TodoCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created todo
          schema:
            $ref: '#/definitions/db.Todo'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "422":
          description: Bad request
          schema:
            $ref: '#/definitions/handlers.ValidationErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.InternalErrorResponse'
      summary: Create a new todo
      tags:
      - Todo
  /todo/{id}:
    delete:
      description: Delete an existing todo.
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No content
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Todo not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.InternalErrorResponse'
      summary: Delete a todo
      tags:
      - Todo
    put:
      consumes:
      - application/json
      description: Update an existing todo with the provided todo data.
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      - description: Todo data
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/handlers.TodoUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated todo
          schema:
            $ref: '#/definitions/db.Todo'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Todo not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "422":
          description: Validation error
          schema:
            $ref: '#/definitions/handlers.ValidationErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.InternalErrorResponse'
      summary: Update a todo
      tags:
      - Todo
  /todo/{id}/assign:
    post:
      consumes:
      - application/json
      description: Assign a user to a todo.
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      - description: User data
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/handlers.TodoAssignRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created todo assignment
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Todo or User not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "409":
          description: Duplicate assignment
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "422":
          description: Validation error
          schema:
            $ref: '#/definitions/handlers.ValidationErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.InternalErrorResponse'
      summary: Assign a user to a todo
      tags:
      - Todo
  /user:
    get:
      description: Get the list of all users.
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/db.User'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.InternalErrorResponse'
      summary: Get all users
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Create a new user with the provided user data.
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.UserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created user
          schema:
            $ref: '#/definitions/db.User'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "422":
          description: Validation error
          schema:
            $ref: '#/definitions/handlers.ValidationErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.InternalErrorResponse'
      summary: Create a new user
      tags:
      - User
  /user/{id}:
    delete:
      description: Delete an existing user with the provided user ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.InternalErrorResponse'
      summary: Delete an existing user
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update an existing user with the provided user data.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated user
          schema:
            $ref: '#/definitions/db.User'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "422":
          description: Validation error
          schema:
            $ref: '#/definitions/handlers.ValidationErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.InternalErrorResponse'
      summary: Update an existing user
      tags:
      - User
  /user/{id}/todos:
    get:
      description: Get the list of all todos of a user with the provided user ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Type of todos to get
        enum:
        - assigned
        - created
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of todos
          schema:
            items:
              $ref: '#/definitions/db.Todo'
            type: array
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.InternalErrorResponse'
      summary: Get all todos of a user
      tags:
      - User
swagger: "2.0"
