// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: todo.sql

package db

import (
	"context"
)

const assignUserToTodo = `-- name: AssignUserToTodo :execrows
INSERT INTO todo_user (todo_id, user_id)
VALUES ($1, $2)
`

type AssignUserToTodoParams struct {
	TodoID int32 `json:"todo_id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) AssignUserToTodo(ctx context.Context, arg AssignUserToTodoParams) (int64, error) {
	result, err := q.db.Exec(ctx, assignUserToTodo, arg.TodoID, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const createTodo = `-- name: CreateTodo :one
INSERT INTO todo (title, description, creator_id)
VALUES ($1, $2, $3)
RETURNING id, creator_id, title, description, completed, created_at, updated_at
`

type CreateTodoParams struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	CreatorID   int32  `json:"creator_id"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRow(ctx, createTodo, arg.Title, arg.Description, arg.CreatorID)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.Title,
		&i.Description,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :execrows
DELETE FROM todo
WHERE id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id int32) (int64, error) {
	result, err := q.db.Exec(ctx, deleteTodo, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getAllTodosOfUser = `-- name: GetAllTodosOfUser :many
SELECT todo.id, todo.creator_id, todo.title, todo.description, todo.completed, todo.created_at, todo.updated_at FROM todo
LEFT JOIN todo_user ON todo.id = todo_user.todo_id
WHERE todo_user.user_id = $1 OR todo.creator_id = $1
`

func (q *Queries) GetAllTodosOfUser(ctx context.Context, userID int32) ([]Todo, error) {
	rows, err := q.db.Query(ctx, getAllTodosOfUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.CreatorID,
			&i.Title,
			&i.Description,
			&i.Completed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAssignedTodosOfUser = `-- name: GetAssignedTodosOfUser :many
SELECT todo.id, todo.creator_id, todo.title, todo.description, todo.completed, todo.created_at, todo.updated_at FROM todo
JOIN todo_user ON todo.id = todo_user.todo_id
WHERE todo_user.user_id = $1
`

func (q *Queries) GetAssignedTodosOfUser(ctx context.Context, userID int32) ([]Todo, error) {
	rows, err := q.db.Query(ctx, getAssignedTodosOfUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.CreatorID,
			&i.Title,
			&i.Description,
			&i.Completed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCreatedTodosOfUser = `-- name: GetCreatedTodosOfUser :many
SELECT id, creator_id, title, description, completed, created_at, updated_at FROM todo
WHERE todo.creator_id = $1
`

func (q *Queries) GetCreatedTodosOfUser(ctx context.Context, creatorID int32) ([]Todo, error) {
	rows, err := q.db.Query(ctx, getCreatedTodosOfUser, creatorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.CreatorID,
			&i.Title,
			&i.Description,
			&i.Completed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTodos = `-- name: ListTodos :many
SELECT id, creator_id, title, description, completed, created_at, updated_at FROM todo
ORDER BY created_at DESC
`

func (q *Queries) ListTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.Query(ctx, listTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.CreatorID,
			&i.Title,
			&i.Description,
			&i.Completed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :one
UPDATE todo
SET title = $1, description = $2, completed = $3
WHERE id = $4
RETURNING id, creator_id, title, description, completed, created_at, updated_at
`

type UpdateTodoParams struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	Completed   bool   `json:"completed"`
	ID          int32  `json:"id"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (Todo, error) {
	row := q.db.QueryRow(ctx, updateTodo,
		arg.Title,
		arg.Description,
		arg.Completed,
		arg.ID,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.Title,
		&i.Description,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
